searchState.loadedDescShard("elastic_elgamal", 0, "ElGamal encryption and related cryptographic protocols …\nCandidate for a <code>VerifiableDecryption</code> that is not yet …\nRestored challenge scalar does not match the one provided …\nCiphertext for ElGamal encryption.\nElGamal <code>Ciphertext</code> together with fully retained …\nZero-knowledge proof that an ElGamal ciphertext encrypts …\nLookup table for discrete logarithms.\nUnderlying group element is the group identity.\nInvalid size of the byte buffer.\nByte buffer has correct size, but does not represent a …\nKeypair for ElGamal encryption and related protocols, …\nA collection (e.g., number of responses in a <code>RingProof</code>) …\nZero-knowledge proof of equality of two discrete …\n<code>RangeDecomposition</code> together with values precached for …\nZero-knowledge proof of possession of one or more secret …\nPublic key for ElGamal encryption and related protocols.\nErrors that can occur when converting other types to …\nDecomposition of an integer range <code>0..n</code> into one or more …\nZero-knowledge proof that an ElGamal ciphertext encrypts a …\nZero-knowledge proof that the one or more encrypted values …\nSecret key for ElGamal encryption and related protocols. …\nZero-knowledge proof that an ElGamal-encrypted value is …\nVerifiable decryption for a certain <code>Ciphertext</code> in the …\nError verifying base proofs, such as <code>RingProof</code>, …\nHigh-level applications for proofs defined in this crate.\nReturns bytes representing the group element corresponding …\nReturns the group element equivalent to this key.\nReturns the group element encapsulated in this decryption.\nReturns a reference to the blinded element.\nReturns a reference to the contained decomposition.\nDecrypts the provided ciphertext and returns the original …\nDecrypts the provided ciphertext and returns the original …\nDecrypts the provided ciphertext and returns the produced …\nDecrypts the provided ciphertext and returns the produced …\nCommitted Pedersen’s distributed key generation (DKG).\nEncrypts a value for this key.\nEncrypts a boolean value (0 or 1) and provides a …\nEncrypts a group element.\nEncrypts <code>value</code> and provides a zero-knowledge proof that it …\nEncrypts zero value and provides a zero-knowledge proof of …\nExposes the scalar equivalent to this key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a secret key from bytes. If bytes do not …\nDeserializes a public key from bytes.\nDeserializes decryption data from <code>bytes</code>. Returns <code>None</code> if …\nAttempts to parse the proof from <code>bytes</code>. Returns <code>None</code> if …\nAttempts to deserialize a proof from bytes. Returns <code>None</code> …\nCreates a proof that a value in <code>ciphertext</code> is in the <code>range</code>.\nCreates <code>Ciphertext</code> instance from <code>random_element</code> and …\nConverts the enclosed value into a scalar.\nGenerates a random secret key.\nGenerates a random keypair.\nGets the discrete log of <code>decrypted_element</code>, or <code>None</code> if it …\nTraits and implementations for prime-order groups in which …\nReturns a reference to the contained <code>Ciphertext</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns public and secret keys comprising this keypair.\nConverts this candidate decryption into a …\nCreates a decryption for the specified <code>ciphertext</code> under …\nCreates a lookup table for the specified <code>values</code>.\nEncrypts a value for the specified receiver.\nCreates a proof based on the <code>ciphertext</code> for <code>receiver</code> and …\nCreates a new proof.\nCreates a new proof that squares of values encrypted in …\nCreates a proof of possession with the specified <code>keypairs</code>.\nEncrypts <code>value</code> for <code>receiver</code> and creates a zero-knowledge …\nCreates a non-blinded encryption of the specified scalar …\nFinds an optimal decomposition of the range with the given …\nReturns the size of <code>RangeProof</code>s using this decomposition, …\nReturns the public part of this keypair.\nReturns a reference to the random element.\nReturns the secret part of this keypair.\nFeldman’s verifiable secret sharing (VSS) for ElGamal …\nSerializes this decryption into bytes.\nSerializes this ciphertext as two group elements (the …\nSerializes this proof into bytes. As described above, the …\nSerializes this proof into bytes. As described above, the …\nReturns the exclusive upper bound of the range presentable …\nVerifies this as decryption for <code>ciphertext</code> under <code>key</code> using …\nErrors\nVerifies this proof.\nVerifies this proof against the provided partial …\nVerifies this proof against the provided <code>public_keys</code>.\nVerifies this proof against <code>ciphertext</code> for <code>receiver</code> and …\nVerifies a proof of encryption correctness of a boolean …\nVerifies <code>proof</code> that <code>ciphertext</code> encrypts a value lying in …\nVerifies that this is an encryption of a zero value.\nRepresents encryption of zero value without the blinding …\nActual size of the collection.\nHuman-readable collection name, such as “public keys”.\nExpected size of the collection.\nParameters of an <code>EncryptedChoice</code> polling.\nError verifying an <code>EncryptedChoice</code>.\nError verifying the proof of equivalence for credits.\nError verifying a <code>RangeProof</code> for credits.\nZero or more encrypted choices from <code>n</code> options (<code>n &gt;= 1</code>) …\nMulti-choice setup for <code>EncryptedChoice</code>, in which it can …\nMismatch between expected and actual number of options in …\nMismatch between expected and actual number of options in …\nProduced / verified proofs.\nEncapsulation of functionality for proving and verifying …\nEncrypted ballot for quadratic voting together with …\nErrors that can occur when verifying <code>QuadraticVotingBallot</code>…\nQuadratic voting parameters prepared for a certain <code>Group</code>.\nError verifying <code>EncryptedChoice::range_proof()</code>.\nSingle-choice setup for <code>EncryptedChoice</code>, in which it can …\nError verifying <code>EncryptedChoice::sum_proof()</code>.\nError verifying a <code>RangeProof</code> for a vote for a particular …\nReturns ciphertexts for all options <strong>without</strong> checking the …\nReturns the number of credits per ballot.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of encrypted choices. This value is …\nReturns the maximum number of votes per option.\nCreates parameters for a multi-choice polling.\nCreates an encrypted multi-choice.\nCreates new parameters for the specified number of <code>credits</code> …\nCreates a ballot based on the provided parameters and voter…\nReturns the number of options in these parameters.\nReturns the number of options.\nReturns the range proof for the choice ciphertexts.\nReturns the public key for which the <code>EncryptedChoice</code> are …\nReturns the public key for which the <code>QuadraticVotingBallot</code>…\nSets the maximum number of votes per option.\nCreates parameters for a single-choice polling.\nCreates a new encrypted choice.\nReturns the sum proof for the choice ciphertexts.\nVerifies the zero-knowledge proofs in this choice and …\nVerifies this ballot against the provided parameters.\nActual number of options.\nExpected number of options.\nActual number of options.\nError that occurred during range proof verification.\nExpected number of options.\nZero-based option index.\nSecret share for this participant was already provided.\nErrors that can occur during the distributed key …\nPublic shares obtained from accumulated public polynomial …\nProvided commitment does not correspond to the party’s …\nSecret received from the party does not correspond to …\nProvided proof of possession or public polynomial is …\nOpening for a hash commitment used in Pedersen’s …\nParticipant state during the first stage of the committed …\nParticipant state during the second stage of the committed …\nParticipant state during the third and final stage of the …\nPublic participant information in the distributed key …\nReturns the commitment of participant’s share of the …\nCompletes the distributed key generation protocol …\nProceeds to the next step of the DKG protocol, in which …\nProceeds to the next step of the DKG protocol, in which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns 0-based index of this participant.\nReturns 0-based index of this participant.\nReturns 0-based index of this participant.\nInserts a commitment from the participant with index …\nInserts public polynomial from participant with index …\nInserts a secret share from participant with index …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this information to the owned form.\nReturns indices of parties whose commitments were not …\nReturns the indices of parties whose public polynomials …\nReturns indices of parties whose secret shares were not …\nInstantiates a distributed key generation participant.\nOpening for the participant’s key commitment.\nReturns params of this threshold ElGamal encryption scheme.\nReturns params of this threshold ElGamal encryption scheme.\nReturns params of this threshold ElGamal encryption scheme.\nParticipant’s public polynomial.\nProof of possession for the secret polynomial that …\nReturns public participant information: participant’s …\nReturns the secret share for a participant with the …\nPrime-order subgroup of Curve25519 without any transforms …\nByte size of a serialized <code>Self::Element</code>.\nElement of the group. Arithmetic operations requested here …\nHelper trait for <code>Group</code> that describes operations on group …\nGeneric <code>Group</code> implementation for elliptic curves defined …\nPrime-order group in which the discrete log problem and …\nProvides an arbitrary number of random bytes.\nRistretto transform of Curve25519, also known as …\nByte size of a serialized <code>Self::Scalar</code>.\nScalar type. As per <code>Group</code> contract, scalars must form a …\nHelper trait for <code>Group</code> that describes operations on group …\nDeserializes an element from <code>buffer</code>, which is guaranteed …\nDeserializes the scalar from <code>buffer</code>, which is guaranteed …\nWrites random bytes into the specified buffer. As follows …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a random scalar based on the provided CSPRNG. …\nReturns the agreed-upon generator of the group.\nReturns the identity of the group (aka point at infinity …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the <code>scalar</code>, which is guaranteed to be non-zero. …\nInverts scalars in a batch. This operation does not need …\nChecks if the specified element is the identity.\nMultiplies the provided scalar by <code>ElementOps::generator()</code>. …\nMultiplies provided <code>scalars</code> by <code>elements</code>. This operation …\nGenerates a scalar from a <code>source</code> of random bytes. This …\nSerializes <code>element</code> into the provided <code>buffer</code>, which is …\nSerializes the scalar into the provided <code>buffer</code>, which is …\nCalculates <code>k * k_element + r * G</code>, where <code>G</code> is the group …\nMultiplies the provided scalar by <code>ElementOps::generator()</code>. …\nMultiplies provided <code>scalars</code> by <code>elements</code>. Unlike …\nPersonalized state of a participant of a threshold ElGamal …\nDealer in a Feldman verifiable secret sharing scheme.\nErrors that can occur during the secret sharing protocol.\nProof of possession supplied with the dealer’s public …\nSecret received from the dealer does not correspond to …\nPublic polynomial received from the dealer is malformed.\nParticipants’ public keys do not correspond to a single …\nParameters of a threshold ElGamal encryption scheme.\nNumber of participants specified in <code>Params</code> does not match …\nFull public information about the participants of a …\nCombines shares decrypting the specified <code>ciphertext</code>. The …\nCreates a <code>VerifiableDecryption</code> for the specified <code>ciphertext</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a key set from the parameters and public keys of …\nReturns 0-based index of this participant.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the public key set for the threshold ElGamal …\nCreates an instance based on information provided by the …\nInstantiates a dealer.\nCreates the participant state based on readily available …\nCreates new parameters.\nReturns parameters for this scheme.\nReturns the public key of a participant with the specified …\nReturns the slice with all participants’ public keys.\nGenerates a <code>ProofOfPossession</code> of the participant’s …\nReturns public participant information: dealer’s public …\nReturns share of the public key for this participant.\nReturns share of the secret key for this participant. This …\nReturns a secret share for a participant with the …\nReturns the shared public key used in this scheme.\nTotal number of shares / participants.\nNumber of participants necessary to jointly restore the …\nVerifies a proof of possession of the participant’s …\nVerifies a candidate decryption share for <code>ciphertext</code> …")